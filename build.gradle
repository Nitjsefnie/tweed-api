import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
	id 'maven-publish'
	id 'java'
	id 'com.github.johnrengelman.shadow' version '5.2.0' apply false
	id 'fabric-loom' version '0.7-SNAPSHOT' apply false
}

group = project.maven_group

allprojects {
	apply plugin: 'fabric-loom'
	apply plugin: 'java-library'

	repositories {
		mavenCentral()
		maven { url "https://maven.shedaniel.me" }
		maven { url "https://maven.terraformersmc.com/releases" }
		maven { url "https://jitpack.io" }
	}

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	dependencies {
		minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		mappings "net.fabricmc:yarn:${rootProject.minecraft_version}+build.${rootProject.yarn_mappings}"
		modCompile "net.fabricmc:fabric-loader:${rootProject.loader_version}"
	}

	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}

	jar {
		from "LICENSE"
	}

	afterEvaluate {
		// configure the maven publication
		publishing {
			publications.create(archivesBaseName.replaceAll(/-(\w)/, { it[1].toUpperCase() }), MavenPublication.class, {
				version = project.version
				artifactId = "${project.archivesBaseName}-${project.minecraft_major_version}"
				// add all the jars that should be included when publishing to maven
				artifact(remapJar) {
					builtBy remapJar
				}

				if (project.hasProperty("sourcesJar")) {
					artifact(sourcesJar) {
						builtBy remapSourcesJar
					}
				}
			})
		}
	}
}

subprojects {
	configurations {
		dev
	}

	jar {
		archiveBaseName.set(archivesBaseName)
		archiveClassifier.set("dev")
	}

	afterEvaluate {
		if (pluginManager.hasPlugin("com.github.johnrengelman.shadow")) {
			task shadowSourcesJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
				relocators = shadowJar.relocators
				from sourceSets.main.output
				configurations = [project.configurations.shadow]
				archiveBaseName.set(archivesBaseName)
				archiveClassifier.set("sources")
			}

			remapJar {
				dependsOn(shadowJar)
			}

			sourcesJar {
				finalizedBy(shadowSourcesJar)
			}

			shadowJar {
				configurations = [project.configurations.shadow]
				archiveBaseName.set(archivesBaseName)
				archiveClassifier.set("dev")
			}
		}

		remapJar {
			archiveName = "${project.archivesBaseName}-${version}.jar"
			beforeEvaluate {
				input = file("${project.buildDir}/libs/$project.archivesBaseName-${version}-dev.jar")
			}
		}

		artifacts {
			dev file: file("${project.buildDir}/libs/$project.archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
		}

		processResources {
			inputs.property "version", project.version

			from(sourceSets.main.resources.srcDirs) {
				include "fabric.mod.json"
				expand "version": project.version
			}

			from(sourceSets.main.resources.srcDirs) {
				exclude "fabric.mod.json"
			}
		}
	}

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this task, sources will not be generated.
	task sourcesJar(type: Jar, dependsOn: classes) {
		archiveBaseName.set(archivesBaseName)
		archiveClassifier.set("sources")
		from sourceSets.main.allSource
	}

	task updateModMetaFiles(type: Copy) {
		def projectId = project.archivesBaseName.replace('-', '_')
		from rootProject.file(".template/icon.png")
		into "src/main/resources/assets/${projectId}"
		include "*.png"
		outputs.upToDateWhen { false }
		doLast {
			def slurper = new JsonSlurper()
			def template = slurper.parse(rootProject.file(".template/fabric.mod.json"))
			def path = file("src/main/resources/fabric.mod.json")
			def json = path.exists() ? slurper.parse(path) : new HashMap<>()
			json += template
			file("src/main/resources/fabric.mod.json")
					.write(JsonOutput.prettyPrint(JsonOutput.toJson(json)).replace("\${project}", projectId))
		}
	}
}

dependencies {
	subprojects.each {
		if (it.configurations.getAsMap().containsKey("shadowDev")) {
			implementation(project(path: ":$it.name", configuration: "shadow")) {
				exclude module: "fabric-loader"
			}
		} else {
			implementation(project(path: ":$it.name", configuration: "dev")) {
				exclude module: "fabric-loader"
			}
		}

		if (!it.name.contains("testmod")) {
			include(modApi(project("${it.name}:")))
		}

		modRuntime("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}") {
			exclude module: "fabric-loader"
		}

	}
}

publishing {
	repositories {
		if (project.hasProperty("siphalorMavenUser")) {
			maven {
				url = "https://maven.siphalor.de/upload.php/"
				name = "Siphalor"
				credentials {
					username = siphalorMavenUser
					password = siphalorMavenPassword
				}
			}
		}
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
