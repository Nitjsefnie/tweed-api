import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
	id 'maven-publish'
	id 'java'
	id 'com.github.johnrengelman.shadow' version '7.0.0' apply false
	id 'fabric-loom' version '0.8-SNAPSHOT' apply false
	id 'org.cadixdev.licenser' version '0.6.1' apply false
}

group = project.maven_group

allprojects {
	apply plugin: 'fabric-loom'
	apply plugin: 'java-library'
	apply plugin: 'org.cadixdev.licenser'

	repositories {
		mavenCentral()
		maven { url "https://maven.siphalor.de" }
		maven { url "https://maven.shedaniel.me" }
		maven { url "https://maven.terraformersmc.com/releases" }
		maven { url "https://jitpack.io" }
	}

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_16

	dependencies {
		minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		mappings "net.fabricmc:yarn:${rootProject.minecraft_version}+build.${rootProject.yarn_mappings}"
		modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
	}

	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}

	jar {
		from "LICENSE"
		dependsOn(processResources)
	}

	license {
		header rootProject.file('LICENSE_HEADER')
		include '**/*.java'
	}
}

subprojects {
	jar {
		archiveBaseName.set(archivesBaseName)
		archiveClassifier.set("dev")
	}

	afterEvaluate {
		if (pluginManager.hasPlugin("com.github.johnrengelman.shadow")) {
			task shadowSourcesJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
				relocators = shadowJar.relocators
				from sourceSets.main.output
				configurations = [project.configurations.shadow]
				archiveBaseName.set(archivesBaseName)
				archiveClassifier.set("sources")
			}
			remapSourcesJar.dependsOn(shadowSourcesJar)

			remapJar {
				dependsOn(shadowJar)
			}

			sourcesJar {
				finalizedBy(shadowSourcesJar)
			}

			shadowJar {
				configurations = [project.configurations.shadow]
				archiveBaseName.set(archivesBaseName)
				archiveClassifier.set("dev")
			}
		}

		remapJar {
			archiveFileName = "${project.archivesBaseName}-${project.version}.jar"
		}

		processResources {
			inputs.property "version", project.version

			afterEvaluate {
				from(sourceSets.main.resources.srcDirs) {
					include "fabric.mod.json"
					expand "version": project.version
					duplicatesStrategy DuplicatesStrategy.INCLUDE
				}
			}
		}
	}

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this task, sources will not be generated.
	task sourcesJar(type: Jar, dependsOn: classes) {
		archiveBaseName.set(archivesBaseName)
		archiveClassifier.set("sources")
		from sourceSets.main.allSource
	}

	task updateModMetaFiles(type: Copy) {
		def projectId = project.archivesBaseName.replace('-', '_')
		from rootProject.file(".template/icon.png")
		into "src/main/resources/assets/${projectId}"
		include "*.png"
		outputs.upToDateWhen { false }
		doLast {
			def slurper = new JsonSlurper()
			def template = slurper.parse(rootProject.file(".template/fabric.mod.json"))
			def path = file("src/main/resources/fabric.mod.json")
			def json = path.exists() ? slurper.parse(path) : new HashMap<>()
			json += template
			file("src/main/resources/fabric.mod.json")
					.write(JsonOutput.prettyPrint(JsonOutput.toJson(json)).replace("\${project}", projectId))
		}
	}

	afterEvaluate {
		// configure the maven publication
		publishing {
			publications.create(archivesBaseName.replaceAll(/-(\w)/, { it[1].toUpperCase() }), MavenPublication.class, {
				version = project.version
				artifactId = "${project.archivesBaseName}-${project.minecraft_major_version}"
				// add all the jars that should be included when publishing to maven
				artifact(remapJar) {
					builtBy remapJar
				}

				artifact(sourcesJar) {
					builtBy remapSourcesJar
				}
			})
		}
	}
}

dependencies {
	subprojects.each {
		if (!it.name.contains("testmod")) {
			if (it.jar.archivePath.exists()) {
				//include(modApi(project("${it.name}:")))
			}
		}

		modRuntime("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}") {
			exclude module: "fabric-loader"
		}
	}
}

publishing {
	repositories {
		if (project.hasProperty("siphalorMavenUser")) {
			maven {
				url = "https://maven.siphalor.de/upload.php/"
				name = "Siphalor"
				credentials {
					username = siphalorMavenUser
					password = siphalorMavenPassword
				}
			}
		}
		// uncomment to publish to the local maven
		// mavenLocal()
	}

	publications.create("tweed4", MavenPublication.class, {
		version = project.version
		artifactId = archivesBaseName + "-" + minecraft_major_version

		artifact(remapJar) {
			builtBy remapJar
		}

		pom.withXml {
			def deps = asNode().appendNode("dependencies")

			configurations.modApi.allDependencies.each {
				def dep = deps.appendNode("dependency")
				dep.appendNode("groupId", rootProject.group)
				dep.appendNode("artifactId", it.name.replace("tweed", "tweed4"))
				dep.appendNode("version", it.version)
			}
		}
	})
}
