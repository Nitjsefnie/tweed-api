import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import org.w3c.dom.Element

plugins {
	id 'maven-publish'
	id 'java'
	id 'com.github.johnrengelman.shadow' version '7.0.0' apply false
	id 'fabric-loom' version '0.10-SNAPSHOT' apply false
	id 'org.cadixdev.licenser' version '0.6.1' apply false
}

// This POM processor adjusts the dependencies on the Tweed subprojects to match the published artifact ids
def pomFixer = {
	def deps = it.asElement().getElementsByTagName("dependencies").item(0) as Element
	deps = deps.getElementsByTagName("dependency")
	for (i in 0..<deps.length) {
		def dep = deps.item(i) as Element
		if (dep.getElementsByTagName("groupId").item(0).getTextContent() == "de.siphalor.tweed4") {
			def depArtifactId = dep.getElementsByTagName("artifactId").item(0) as Element
			depArtifactId.setTextContent(depArtifactId.getTextContent().replace("tweed-", "tweed4-") + "-$minecraft_major_version")
		}
	}
} as Action<? super XmlProvider>

allprojects {
	apply plugin: 'fabric-loom'
	apply plugin: 'java-library'
	apply plugin: 'org.cadixdev.licenser'

	group = project.maven_group

	repositories {
		mavenCentral()
		maven { url "https://maven.siphalor.de" }
		maven { url "https://maven.shedaniel.me" }
		maven { url "https://maven.terraformersmc.com/releases" }
		maven { url "https://jitpack.io" }
	}

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	loom {}

	dependencies {
		minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		mappings "net.fabricmc:yarn:${rootProject.minecraft_version}+build.${rootProject.yarn_mappings}"
		modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"

		testImplementation "org.junit.jupiter:junit-jupiter:5+"
	}

	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}

	jar {
		from "LICENSE"
		dependsOn(processResources)
	}

	license {
		header rootProject.file('LICENSE_HEADER')
		include '**/*.java'
	}

	test {
		useJUnitPlatform()
	}

	// Disable Gradle module format because subproject artifact ids currently don't seem to be changable easily
	tasks.withType(GenerateModuleMetadata) {
		enabled = false
	}
}

subprojects {
	// Fix for Loom 0.10 transitive dependency mess: https://discord.com/channels/507304429255393322/842691768175951942/908391237806096444
	configurations {
		namedElements.extendsFrom implementation, api
	}

	jar {
		archiveBaseName.set(archivesBaseName)
		archiveClassifier.set("dev")
	}

	afterEvaluate {
		if (pluginManager.hasPlugin("com.github.johnrengelman.shadow")) {
			task shadowSourcesJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
				relocators = shadowJar.relocators
				from sourceSets.main.output
				configurations = [project.configurations.shadow]
				archiveBaseName.set(archivesBaseName)
				archiveClassifier.set("sources")
			}
			remapSourcesJar.dependsOn(shadowSourcesJar)

			jar {
				finalizedBy(shadowJar)
			}

			sourcesJar {
				finalizedBy(shadowSourcesJar)
			}

			shadowJar {
				configurations = [project.configurations.shadow]
				archiveBaseName.set(archivesBaseName)
				archiveClassifier.set("dev")
			}

			remapJar {
				dependsOn(shadowJar)
			}
		}

		remapJar {
			archiveFileName = "${project.archivesBaseName}-${project.version}.jar"
		}

		processResources {
			inputs.property "version", project.version

			afterEvaluate {
				from(sourceSets.main.resources.srcDirs) {
					include "fabric.mod.json"
					expand "version": project.version
					duplicatesStrategy DuplicatesStrategy.INCLUDE
				}
			}
		}
	}

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this task, sources will not be generated.
	task sourcesJar(type: Jar, dependsOn: classes) {
		archiveBaseName.set(archivesBaseName)
		archiveClassifier.set("sources")
		from sourceSets.main.allSource
	}

	task updateModMetaFiles(type: Copy) {
		def projectId = project.archivesBaseName.replace('-', '_')
		from rootProject.file(".template/icon.png")
		into "src/main/resources/assets/${projectId}"
		include "*.png"
		outputs.upToDateWhen { false }
		doLast {
			def slurper = new JsonSlurper()
			def template = slurper.parse(rootProject.file(".template/fabric.mod.json"))
			def path = file("src/main/resources/fabric.mod.json")
			def json = path.exists() ? slurper.parse(path) : new HashMap<>()
			json += template
			file("src/main/resources/fabric.mod.json")
					.write(JsonOutput.prettyPrint(JsonOutput.toJson(json)).replace("\${project}", projectId)+"\n")
		}
	}

	def projectId = archivesBaseName.replaceAll(/-(\w)/, {it[1].toUpperCase()})

	// configure the maven publication
	publishing {
		publications.create(projectId, MavenPublication.class, {
			version = project.version
			artifactId = "${project.archivesBaseName}-${project.minecraft_major_version}"

			from components.java
			java.withSourcesJar()

			pom.withXml(pomFixer)
		})
	}
}

dependencies {
	modRuntimeOnly("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}") {
		exclude module: "fabric-loader"
	}

	afterEvaluate {
		subprojects {
			include(api(project(path: ":"+it.name, configuration: "namedElements")))
			rootProject.getTasksByName("remapJar", false).iterator().next().dependsOn(it.getTasksByName("remapJar", false).iterator().next())
		}
	}
}

publishing {
	repositories {
		if (project.hasProperty("siphalorMavenUser")) {
			maven {
				url = "https://maven.siphalor.de/upload.php/"
				name = "Siphalor"
				credentials {
					username = siphalorMavenUser
					password = siphalorMavenPassword
				}
			}
		}
	}

	publications.create("tweed4", MavenPublication.class, {
		version = project.version
		artifactId = archivesBaseName + "-" + minecraft_major_version

		from components.java

		pom.withXml(pomFixer)
	})
}
